name: 'Install local pnl package'
description: 'Install PsyNeulink dependencies and editable PNL package'
inputs:
  features:  # id of input
    description: 'PsyNeuLink features to install'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: OS dependencies
      shell: bash
      env:
        RUNNER_OS: ${{ runner.os }}
        HOMEBREW_NO_AUTO_UPDATE: 1
      # Composited actions can't use step conditionals.
      run: |
        case "$RUNNER_OS" in
          macOS*) brew install graphviz ;;
          Linux*) sudo apt-get update && sudo apt-get install -y --no-install-recommends graphviz ;;
          Windows*) choco install --no-progress -y graphviz --version=2.38.0.20190211 ;;
          *) echo "Unsupported OS"; exit 1 ;;
        esac

    - name: Setup Python venv
      shell: bash
      run: |
        case "$RUNNER_OS" in
          macOS* | Linux*)
            export VIRTUAL_ENV='${{ runner.temp }}/_venv'; export PYTHON_LOC=$VIRTUAL_ENV/bin/ ;;
          Windows*)
            export VIRTUAL_ENV='${{ runner.temp }}\_venv'; export PYTHON_LOC=$VIRTUAL_ENV\\Scripts ;;
          *) echo "Unsupported OS"; exit 1 ;;
        esac
        python -m venv $VIRTUAL_ENV
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$PYTHON_LOC" >> $GITHUB_PATH

    - name: Drop pytorch on x86
      shell: bash
      run: |
        if [ $(python -c 'import struct; print(struct.calcsize("P") * 8)') == 32 ]; then
          sed -i /torch/d requirements.txt
          sed -i /modeci_mdf/d requirements.txt
          # pywinpty is a transitive dependency and v1.0+ removed support for x86 wheels
          # terminado >= 0.10.0 pulls in pywinpty >= 1.1.0
          [[ ${{ runner.os }} = Windows* ]] && pip install "pywinpty<1" "terminado<0.10"
        fi

    - name: Install updated package
      if: ${{ startsWith(github.head_ref, 'dependabot/pip') && matrix.pnl-version != 'base' }}
      shell: bash
      id: new_package
      run: |
        python -m pip install --upgrade pip wheel
        export NEW_PACKAGE=`echo '${{ github.head_ref }}' | cut -f 4 -d/ | sed 's/-gt.*//' | sed 's/-lt.*//'`
        echo "::set-output name=new_package::$NEW_PACKAGE"
        pip install "`echo $NEW_PACKAGE | sed 's/[-_]/./g' | xargs grep *requirements.txt -h -e | head -n1`"
        pip show "$NEW_PACKAGE" | grep 'Version' | tee new_version.deps

    - name: Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip wheel
        pip install -e .[${{ inputs.features }}]

    - name: "Cleanup old wheels"
      shell: bash
      run: |
        pip cache info
        INSTALLED=`pip list | sed 's/-/_/g' | sed 's/  */-/' | tail -n+3`
        CACHED=`pip cache list | cut -f 2,3 -d- | tail -n+3`
        for P in $CACHED; do
          # Remove cached and not installed
          if [ `echo $INSTALLED | grep -o $P | wc -l` == "0" ] ; then
            pip cache remove -v $P || true
          fi
        done

    - name: Check updated package
      if: ${{ startsWith(github.head_ref, 'dependabot/pip') && matrix.pnl-version != 'base' }}
      shell: bash
      run: |
        pip show ${{ steps.new_package.outputs.new_package }} | grep 'Version' | tee installed_version.deps
        cmp -s new_version.deps installed_version.deps || echo "::error::Package version restricted by dependencies: ${{ steps.new_package.outputs.new_package }}"
        diff new_version.deps installed_version.deps
